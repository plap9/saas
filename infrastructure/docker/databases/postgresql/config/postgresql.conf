# AI Assistant Platform - PostgreSQL Configuration
# Optimized for AI workloads with vector operations

# =============================================================================
# CONNECTION AND AUTHENTICATION
# =============================================================================
listen_addresses = '*'
port = 5432
max_connections = 100
superuser_reserved_connections = 3

# Authentication
authentication_timeout = 1min
password_encryption = scram-sha-256

# SSL (disabled for development, enable for production)
ssl = off
# ssl_cert_file = 'server.crt'
# ssl_key_file = 'server.key'

# =============================================================================
# MEMORY SETTINGS
# =============================================================================
# Memory allocation
shared_buffers = 256MB
effective_cache_size = 1GB
work_mem = 4MB
maintenance_work_mem = 64MB

# Background writer
bgwriter_delay = 200ms
bgwriter_lru_maxpages = 100
bgwriter_lru_multiplier = 2.0

# =============================================================================
# WRITE AHEAD LOG (WAL) SETTINGS
# =============================================================================
# WAL settings for durability and performance
wal_level = replica
wal_buffers = 16MB
checkpoint_completion_target = 0.7
checkpoint_timeout = 5min
max_wal_size = 1GB
min_wal_size = 80MB

# Archive settings (for backup)
archive_mode = on
archive_command = '/bin/true'

# =============================================================================
# QUERY PLANNER SETTINGS
# =============================================================================
# Cost settings optimized for SSD
random_page_cost = 1.1
seq_page_cost = 1.0
cpu_tuple_cost = 0.01
cpu_index_tuple_cost = 0.005
cpu_operator_cost = 0.0025

# Planner settings
default_statistics_target = 100
effective_io_concurrency = 200

# =============================================================================
# VACUUM AND AUTOVACUUM SETTINGS
# =============================================================================
# Vacuum settings
vacuum_cost_delay = 0
vacuum_cost_page_hit = 1
vacuum_cost_page_miss = 10
vacuum_cost_page_dirty = 20
vacuum_cost_limit = 200

# Autovacuum settings
autovacuum = on
autovacuum_max_workers = 3
autovacuum_naptime = 1min
autovacuum_vacuum_threshold = 50
autovacuum_vacuum_scale_factor = 0.2
autovacuum_analyze_threshold = 50
autovacuum_analyze_scale_factor = 0.1

# =============================================================================
# LOGGING SETTINGS
# =============================================================================
# Log settings for development
log_destination = 'stderr'
logging_collector = on
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_file_mode = 0600
log_rotation_age = 1d
log_rotation_size = 10MB

# What to log
log_min_messages = info
log_min_error_statement = error
log_min_duration_statement = 1000  # Log slow queries > 1 second
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on
log_statement = 'all'
log_temp_files = 10MB

# Log format
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
log_error_verbosity = default

# =============================================================================
# PERFORMANCE MONITORING
# =============================================================================
# Statistics collection
track_activities = on
track_counts = on
track_io_timing = on
track_functions = all
stats_temp_directory = 'pg_stat_tmp'

# pg_stat_statements extension settings
shared_preload_libraries = 'pg_stat_statements'
pg_stat_statements.max = 10000
pg_stat_statements.track = all
pg_stat_statements.track_utility = on
pg_stat_statements.save = on

# =============================================================================
# AI/VECTOR SPECIFIC SETTINGS
# =============================================================================
# Increase work_mem for vector operations
# work_mem is already set above, but vector operations may need more

# Parallel query settings for large vector operations
max_parallel_workers_per_gather = 2
max_parallel_workers = 4
parallel_setup_cost = 1000.0
parallel_tuple_cost = 0.1

# =============================================================================
# LOCKS AND CONCURRENCY
# =============================================================================
# Lock settings
deadlock_timeout = 1s
max_locks_per_transaction = 64
max_pred_locks_per_transaction = 64

# Statement timeout
statement_timeout = 0  # Disabled for development
lock_timeout = 0       # Disabled for development
idle_in_transaction_session_timeout = 0  # Disabled for development

# =============================================================================
# LOCALE AND TEXT SEARCH
# =============================================================================
# Text search settings for AI content processing
default_text_search_config = 'pg_catalog.english'

# Timezone
timezone = 'UTC'
log_timezone = 'UTC'

# Locale settings
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'

# =============================================================================
# MISC SETTINGS
# =============================================================================
# Misc settings
shared_preload_libraries = 'pg_stat_statements'
dynamic_shared_memory_type = posix
max_files_per_process = 1000

# Development settings
# restart_after_crash = off  # Uncomment for development

# =============================================================================
# NOTES
# =============================================================================
# This configuration is optimized for:
# 1. AI/ML workloads with vector operations
# 2. Development environment with detailed logging
# 3. Medium-sized datasets with good performance
# 4. SSD storage with appropriate cost settings
#
# For production, consider:
# - Enabling SSL
# - Reducing log verbosity
# - Adjusting memory settings based on available RAM
# - Setting appropriate timeouts
# - Enabling connection pooling 